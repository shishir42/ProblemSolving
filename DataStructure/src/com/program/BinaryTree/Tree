Binary Tree: A tree is called as binary tree if each node has zero, one or two child

It is a family of data structure 
 - BST
 - heap tree
 - AVL tree
 - Red-Black
 - Syntax tree
 - Huffman Coding tree
 
 Why we need Binary Tree?
 - Prerequisite for more advanced trees(BST, AVL, Red-Black, Expression Tree etc)
 - used in solving specific problems like Huffman coding, Heap(priority queue), Expression parsing
 
 //https://www.educba.com/types-of-trees-in-data-structure/
 
 Types of Binary Tree
 - Strict Binary Tree: If each node has either 2 children or none
 - Full Binary Tree: If each non leaf node has 2 children and all leaf nodes are at same level
 - Complete Binary Tree: If all the levels are completely filled except possibly the last level 
   and the last level has all keys as left as possible
 
 Represent a Tree
 - Array
 - Linked List

		        	20 
        
    		100				3
    
 		50      15 		250		35
 
 	222 
 
 - Array 
 		0 	1 	2	3	4	5	6	7	8	9	10
 
 		-	20	100	3	50	15	250	35	222
 		
 Left Child - cell * 2x
 Right Child - cell * (2x + 1) 
 
 
  	1 * 1 = 2 for 100
  	2*1 + 1 = 3 for 3 
  	2 * 2 = 4 for 50
  	2*2 + 1 = 5 for 15 
 	
 
 - Linked List 
 
 
 Binary Tree Operation:
 	- Creation of Tree
 	- Insertion of a node 
 	- deletion of a node
 	- search for a value
 	- traverse all nodes
 	- deletion of tree
 	
 Traversing all nodes of Binary Tree:
 	Depth First Search: 
 		- Preorder traversal  (Root Left-Subtree Right-Subtree)
 		- Inorder traversal   (Left-Subtree Root  Right-Subtree)
 		- Postorder traversal (Left-Subtree Right-Subtree Root)
 	
 	Breadth First Search:
 		- Level Order traversal 
 		
 		
 		         	20 
        
    		100				3
    
 		50      15 		250		35
 
 	222 
 		
 Preorder traversal  (Root Left-Subtree Right-Subtree)
 	- 20 ()()
 	- 20 (100 () ()) ()
 	- 20 (100 () ()) (3 (250) (35))
 	- 20 (100 (50 222) ()) (3 (250) (35))
 	- 20 (100 (50 222) (15)) (3 (250) (35)) 	
 	- 20 100 50 222 15 3 250 35
 	
 preorderTraversal(root)
 	if (root equal null)
 		return error message
 	else
 		print root
 		preorderTraversal(root.left)
 		preorderTraversal(root.right)
 
 Inorder traversal   (Left-Subtree Root  Right-Subtree)
 	- 100() 20 3()
 	- 222, 50, 100, 15, 20, 250, 35
 	
  
 Level Order traversal
 	- 20 100 3 50 15 250 35 222 
 	
levelOrderTraversal(root)
	create a queue
	
	enqueue(root)
  
  	while(queue is not null)
  		enqueue the child of first element
  		dequeue and print
 
 	