- Type of Binary Tree
	* Binary Search Tree
	
- BST 
	-> Left sub tree of a node has a key less than or equal to its parent node's key
	-> Right sub tree of a node has a key greater than to its parent node's key
	

- Creation of BST
	create BST()
		Initialize root with null - O(1)
	Time and Space complexity - O(1)

- Search
	BST_Search(root, value)
		if(root is null)
			return null
		else if(root == value)
			return root
		else if(value < root)
			BST_Search(root.left, value)   T(n/2)
		else if(value > root)
			BST_Search(root.right, value)	T(n/2)

	Time complexity and Space complexity: O(log n)

- Traversal of BST
	- Depth First Search 
		* PreOrder traversal
		* InOrder traversal
		* PostOrder traversal
		
	- Breadth First Search
		* Level Order Traversal
